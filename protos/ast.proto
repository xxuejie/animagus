syntax = "proto3";

package ast;

option go_package = "github.com/xxuejie/animagus/pkg/ast";

message Value {
  enum Type {
    // Primitive fields
    NIL = 0;
    UINT64 = 1;
    BOOL = 2;
    BYTES = 3;
    ERROR = 4;

    // In animagus, we distinguish args and params in the following way:
    // * If a Value struct contains an arg, it will be interpreted as a
    // function, when used in constructs such as REDUCE or MAP, args acts
    // as placeholders for the values to test/transform.
    // * Params, on the other hand, denotes user input when calling RPCs,
    // for example, a user might provide an amount to transfer, or an address
    // to transfer to, those will be represented via parameters
    ARG = 16;
    PARAM = 17;

    // Blockchain data structures
    OUT_POINT = 18;
    CELL_INPUT = 19;
    CELL_DEP = 20;
    SCRIPT = 21;
    CELL = 22;
    TRANSACTION = 23;
    HEADER = 24;

    // Compound fields
    APPLY = 25;
    REDUCE = 26;

    // List fields
    LIST = 27;
    QUERY_CELLS = 28;
    MAP = 29;
    FILTER = 30;

    // Cell get operations
    GET_CAPACITY = 48;
    GET_DATA = 49;
    GET_LOCK = 50;
    GET_TYPE = 51;
    GET_DATA_HASH = 52;
    GET_OUT_POINT = 53;

    // Script get operations
    GET_CODE_HASH = 54;
    GET_HASH_TYPE = 55;
    GET_ARGS = 56;

    // Transaction get operations
    GET_CELL_DEPS = 57;
    GET_HEADER_DEPS = 58;
    GET_INPUTS = 59;
    GET_OUTPUTS = 60;
    GET_WITNESSES = 61;

    // Header get operations
    GET_COMPACT_TARGET = 62;
    GET_TIMESTAMP = 63;
    GET_NUMBER = 64;
    GET_EPOCH = 65;
    GET_PARENT_HASH = 66;
    GET_TRANSACTIONS_ROOT = 67;
    GET_PROPOSALS_HASH = 68;
    GET_UNCLES_HASH = 69;
    GET_DAO = 70;
    GET_NONCE = 71;

    GET_HEADER = 72;

    // Operations
    HASH = 73;
    SERIALIZE_TO_CORE = 74;
    SERIALIZE_TO_JSON = 75;

    NOT = 76;
    AND = 77;
    OR = 78;

    EQUAL = 80;
    LESS = 81;

    LEN = 82;
    SLICE = 83;
    INDEX = 84;

    ADD = 85;
    SUBTRACT = 86;
    MULTIPLY = 87;
    DIVIDE = 88;
    MOD = 89;

    // Special operations
    COND = 120;
    TAIL_RECURSION = 121;
  }
  Type t = 1;
  oneof primitive {
    bool b = 2;
    uint64 u = 3;
    bytes raw = 4;
  }
  repeated Value children = 8;
}

message Call {
  string name = 1;
  Value result = 3;
}

message Stream {
  string name = 1;
  Value filter = 2;
}

message Root {
  repeated Call calls = 1;
  repeated Stream streams = 2;
}
